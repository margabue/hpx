[/=============================================================================
    Copyright (C) 2018 Mikael Simberg

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:applications Quick Start]

This section is intended to get you to the point of running a basic __hpx__
program as quickly as possible. To that end we skip many details but instead
give you hints and links to more details along the way.

We assume that you are on a Unix system with access to reasonably recent
packages. You should have `cmake` and `make` available for the build system
(`pkg-config` is also supported, see __pkg_config__).

[heading Getting HPX]

Download a tarball of the latest release from __stellar_hpx_download__ and
unpack it or clone the repository directly using `git`:

``
    git clone https://github.com/STEllAR-GROUP/hpx.git
``

It is also recommended that you check out the latest stable tag:

``
    git checkout 1.1.0
``

[heading HPX dependencies]

The minimum dependencies needed to use __hpx__ are __boost__ and __hwloc__. If
these are not available through your system package manager, see
__boost_installation__ and __hwloc_installation__ for instructions on how to
build them yourself. In addition to __boost__ and __hwloc__, it is recommended
that you don't use the system allocator, but instead use either `tcmalloc` from
__google_perftools__ (default) or __jemalloc__ for better performance. If you
would like to try __hpx__ without a custom allocator at this point you can
configure __hpx__ to use the system allocator in the next step.

A full list of required and optional dependencies, including recommended
versions is available at __prerequisites__.

[heading Building HPX]

Once you have the source code and the dependencies, set up a separate build
directory and configure the project. Assuming all your dependencies are in paths
known to __cmake__, the following gets you started:

``
    # In the HPX source directory
    mkdir build && cd build
    cmake -DCMAKE_INSTALL_PREFIX=/install/path ..
    make install
``

This will build the core __hpx__ libraries and examples, and install them to
your chosen location. If you want to install __hpx__ to system folders simply
leave out the `CMAKE_INSTALL_PREFIX` option. This may take a while. To speed up
the process launch more jobs by passing the `-jN` option to `make`.

[tip Do not set only `-j` (i.e. `-j` without an explicit number of jobs) unless
you have a lot of memory available on your machine. ]

[tip If you want to change __cmake__ variables for your build it is usually a
good idea to start with a clean build directory to avoid configuration problems.
It is especially important that you use a clean build directory when changing
between `Release` and `Debug` modes. ]

If your dependencies are in custom locations you may need to tell __cmake__
where to find them by passing one or more of the following options to __cmake__:

``
    -DBOOST_DIR=/path/to/boost
    -DHWLOC_ROOT=/path/to/hwloc
    -DTCMALLOC_ROOT=/path/to/tcmalloc
    -DJEMALLOC_ROOT=/path/to/jemalloc
``

If you want to try __hpx__ without using a custom allocator pass
`-DHPX_WITH_MALLOC=system` to __cmake__.

[important If you are building __hpx__ for a system with more than 64 processing
units you must change the __cmake__ variables `HPX_WITH_MORE_THAN_64_THREADS`
(to `On`) and `HPX_WITH_MAX_CPU_COUNT` (to a value at least as big as the number
of (virtual) cores on your system). ]

To build the tests run `make tests`. To run the tests run either `make test` or
use `ctest` for more control over which tests to run. You can run single tests
for example with `ctest --output-on-failure -R
tests.unit.parallel.algorithms.for_loop` or a whole group of tests with `ctest
--output-on-failure -R tests.unit`.

If you did not run `make install` earlier do so now or build the
`simplest_hello_world_1` example by running

``
    make simplest_hello_world_1_exe
``

__hpx__ executables end up in the `bin` directory in your build directory. You
can now run `simplest_hello_world_1` and should see the following output:

``
./bin/simplest_hello_world_1
Hello World!
``

You've just run an example which prints `Hello World!` from the __hpx__ runtime.
The source for the example is in
`examples/quickstart/simplest_hello_world_1.cpp`. The `hello_world` example
(also available in the `examples/quickstart` directory is a distributed hello
world program which is described in __hello_world_example__. It is recommended
that you go through that example only once you are more familiar with the
distributed concepts of __HPX__.

[tip Most build targets in __hpx__ have two names: a simple name suffixed with
`_exe` and a hierarchical name corresponding to what type of example or test the
target is. If you are developing __hpx__ it is often helpful to run `make help`
to get a list of available targets. For example, `make help | grep hello_world`
outputs the following:

``
... examples.quickstart.simplest_hello_world_2
... simplest_hello_world_2_exe
... examples.quickstart.simplest_hello_world_1
... simplest_hello_world_1_exe
... hello_world_exe
... examples.quickstart.hello_world
``

It is also possible to build e.g. all quickstart examples using `make
examples.quickstart`. ]

[heading Setting up an HPX project]

The following `CMakeLists.txt` is a minimal example of what you need in order to
build an executable using __cmake__ and __hpx__:

``
cmake_minimum_required(VERSION 3.3.2)
project(my_hpx_project CXX)
find_package(HPX REQUIRED)
add_hpx_executable(my_hpx_program SOURCES main.cpp)
``

[note You will most likely have more than one `main.cpp` file in your project.
See the section on __using_hpx_cmake__ for more details on how to use
`add_hpx_executable`. ]

Create a new project directory and a `CMakeLists.txt` with the contents above.
Then, in your project directory run the following:

``
touch main.cpp # Create an empty file for now
mkdir build && cd build
cmake -DCMAKE_PREFIX_PATH=/path/to/hpx/installation ..
make all
./my_hpx_program
``

Your program should now start but fail quickly because it doesn't contain a main
function yet.

[heading Hello, World!]

Once you have your project set up, add the following to your `main.cpp`:

[import ../examples/quickstart/simplest_hello_world_1.cpp]

[simplest_hello_world_1_getting_started]

It looks almost like a regular `C++` hello world with the exception of the two
includes and `hpx::cout`. When you include `hpx_main.hpp` some things will be
done behind the scenes to make sure that `main` actually get's launched on the
__hpx__ runtime. So while it looks almost the same you can now use futures,
`async`, parallel algorithms and more which make use of the __hpx__ runtime with
lightweight threads. `hpx::cout` is a replacement for `std::cout` to make sure
printing never blocks a lightweight thread. You can read more about `hpx::cout`
in __iostreams_component__. If you run your program now you should see the
familiar `Hello World!`:

``
    ./my_hpx_program
    Hello World!
``

[note You do not have to let __hpx__ take over your main function like in the
example. You can instead keep your normal main function, and define a separate
`hpx_main` function which acts as the entry point to the __hpx__ runtime. In
that case you start the __hpx__ runtime explicitly by calling `hpx::init`:

[import ../examples/quickstart/simplest_hello_world_2.cpp]

[simplest_hello_world_2_getting_started]

You can also use the `hpx::start` and `hpx::stop` for a non-blocking
alternative, or use `hpx::resume` and `hpx::suspend` if you need to combine
__hpx__ with other runtimes.

See __writing_applications__ for more details on how to initialize and run the
__hpx__ runtime. ]

[caution When including `hpx_main.hpp` the user-defined `main` gets renamed and
the real `main` function is defined by __hpx__. This means that the user-defined
`main` must include a return statement, unlike the real `main`. If you do not
include the return statement you may end up with confusing compile time errors
mentioning `user_main` or even runtime errors.]

[heading Writing task-based applications]

So far we haven't done anything that can't be done using the C++ standard
library. In this section we will give a short overview of what you can do with
__hpx__ on a single node. The essence is to avoid global synchronization and
break up your application into small, composable tasks whose dependencies
control the flow of your application. Remember, however, that __hpx__ allows you
to write distributed applications similarly to how you would write applications
for a single node (see the __intro__).

If you are already familiar with `async` and `future`s from the C++ standard
library, the same functionality is available in __hpx__.

The following terminology is essential when talking about task-based C++
programs:

* lightweight thread: Essential for good performance with task-based programs.
  Lightweight refers to smaller stacks and faster context switching compared to
  OS-threads. Smaller overheads allow the program to be broken up into smaller
  tasks, which in turns helps the runtime fully utilize all processing units.

* `async`: The most basic way of launching tasks asynchronously. Returns a
  `future<T>`.

* `future<T>`: Represents a value of type `T` that will be ready in the future.
  The value can be retrieved with `get` (blocking) and one can check if the
  value is ready with `is_ready` (non-blocking).

* `shared_future<T>`: Same as `future<T>` but can be copied (similar to
  `std::unique_ptr` vs `std::shared_ptr`).

* continuation: A function that is to be run after a previous task has run
  (represented by a future). `then` is a method of `future<T>` that takes a
  function to run next. Used to build up dataflow DAGs. `shared_future`s help
  you split up nodes in the DAG and functions like `when_all` help you join
  nodes in the DAG.

The following example is a collection of the most commonly used functionality in
__hpx__.

[import ../examples/quickstart/potpourri.cpp]
[quickstart_overview]

Try copying the contents to your `main.cpp` file and look at the output. It can
be a good idea to go through the program step by step with a debugger. You can
also try changing the types or adding new arguments to functions to make sure
you can get the types to match. The type of the `then` method can be especially
tricky to get right (the continuation needs to take the future as an argument).

[note __hpx__ programs accept command line arguments. The most important one is
`--hpx:threads=N` to set the number of OS-threads used by __hpx__. __hpx__ uses
on thread per core by default. Play around with the example above and see what
difference the number of threads makes on the `sort` function. See __launching__
for more details on how and what options you can pass to __hpx__.]

[tip The example above used the construction `hpx::when_all(...).then(...)`. For
convenience and performance it is a good idea to replace uses of
`hpx::when_all(...).then(...)` with `dataflow`.]

[tip If possible, prefer to use the provided parallel algorithms instead of
writing your own implementation. This can save you time and the resulting
program is often faster. ]

[heading Next steps]

If you haven't done so already, reading the __terminology__ section will help
you get familiar with the terms used in __hpx__.

The __tutorial__ section contains small, self-contained walkthroughs of example
__hpx__ programs. The __futurization_example__ is a thorough, realistic example
starting from a single node implementation and going stepwise to a distributed
implementation.

The __manual__ contains detailed information on writing, building and running
__hpx__ applications.

[endsect]
