[/=============================================================================
    Copyright (C) 2018 Nikunj Gupta

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]

[section:hpx_main_usage Working of hpx_main.hpp]

In order to initialize __hpx__ from main(), we make use of linker tricks.

It is implemented differently for different Operating Systems. Method of
implementation is as follows:

* [link hpx.manual.hpx_main_usage.linux Linux]: Using linker `--wrap` option.
* [link hpx.manual.hpx_main_usage.mac Mac OSX]: Using the linker `-e` option.
* [link hpx.manual.hpx_main_usage.windows Windows]: Using
`#define main hpx_startup::user_main`

[heading:linux Linux Implementation]

We make use of the Linux linker `ld`'s `--wrap` option to wrap the `main()`
function. This way any call to `main()` are redirected to our own
implementation of main. It is here that we check for the existence of
`hpx_main.hpp` by making use of a shadow variable `include_libhpx_wrap`.
The value of this variable determines the function stack at runtime.

The implementation can be found in libhpx_wrap.a.

[important It is necesaary that `hpx_main.hpp` be not included more than
once. Multiple inclusions can result in multiple definition of
`include_libhpx_wrap`.]

[heading:mac Mac OSX Implementation]

Here we make use of yet another linker option `-e` to change the entry
point to our custom entry function `initialize_main`. We initialize the
__hpx__ runtime system from this function and call main from the initialized
system. We determine the function stack at runtime by making use of the
shadow variable `include_libhpx_wrap`.

The implementation can be found in libhpx_wrap.a.

[important It is necesaary that `hpx_main.hpp` be not included more than
once. Multiple inclusions can result in multiple definition of
`include_libhpx_wrap`.]

[heading:windows Windows Implementation]

We make use of a macro `#define main hpx_startup::user_main` to take care of
the initializations.

This implementation could result in unexpected behaviors.

[endsect]
